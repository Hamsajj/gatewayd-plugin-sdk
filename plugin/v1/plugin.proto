syntax = "proto3";

package plugin.v1;

import "plugin/v1/struct.proto";

option go_package = "github.com/gatewayd-io/gatewayd-plugin-sdk/plugin/v1";

service GatewayDPluginService {
    // GetPluginConfig returns the plugin config upon registration
    rpc GetPluginConfig (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnConfigLoaded is called when the config is loaded from any config provider
    rpc OnConfigLoaded (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnNewLogger is called when a new logger is created
    rpc OnNewLogger (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnNewPool is called when a new pool is created
    rpc OnNewPool (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnNewClient is called when a new client is created
    rpc OnNewClient (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnNewProxy is called when a new proxy is created
    rpc OnNewProxy (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnNewServer is called when a new server is created
    rpc OnNewServer (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnSignal is called when an OS signal is received
    rpc OnSignal (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnRun is called when the gatewayd server is running
    rpc OnRun (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnBooting is called when the gatewayd server is booting
    rpc OnBooting (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnBooted is called when the gatewayd server is booted
    rpc OnBooted (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnOpening is called when the gatewayd server is opening
    rpc OnOpening (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnOpened is called when the gatewayd server is opened
    rpc OnOpened (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnClosing is called when the gatewayd server is closing
    rpc OnClosing (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnClosed is called when the gatewayd server is closed
    rpc OnClosed (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnTraffic is called when the gatewayd server received traffic from a client
    rpc OnTraffic (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnTrafficFromClient is called when the gatewayd server is receiving traffic from a client
    rpc OnTrafficFromClient (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnTrafficToServer is called when the gatewayd server is sending traffic to a server
    rpc OnTrafficToServer (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnTrafficFromServer is called when the gatewayd server is receiving traffic from a server
    rpc OnTrafficFromServer (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnTrafficToClient is called when the gatewayd server is sending traffic to a client
    rpc OnTrafficToClient (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnShutdown is called when the gatewayd server is shutting down
    rpc OnShutdown (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnTick is called when the gatewayd server is ticking
    rpc OnTick (plugin.v1.Struct) returns (plugin.v1.Struct);

    // OnHook is called when the gatewayd server is calling a custom hook
    rpc OnHook (plugin.v1.Struct) returns (plugin.v1.Struct);
}

enum HookName {
    HOOK_NAME_UNSPECIFIED = 0;
    HOOK_NAME_ON_CONFIG_LOADED = 1;
    HOOK_NAME_ON_NEW_LOGGER = 2;
    HOOK_NAME_ON_NEW_POOL = 3;
    HOOK_NAME_ON_NEW_CLIENT = 4;
    HOOK_NAME_ON_NEW_PROXY = 5;
    HOOK_NAME_ON_NEW_SERVER = 6;
    HOOK_NAME_ON_SIGNAL = 7;
    HOOK_NAME_ON_RUN = 8;
    HOOK_NAME_ON_BOOTING = 9;
    HOOK_NAME_ON_BOOTED = 10;
    HOOK_NAME_ON_OPENING = 11;
    HOOK_NAME_ON_OPENED = 12;
    HOOK_NAME_ON_CLOSING = 13;
    HOOK_NAME_ON_CLOSED = 14;
    HOOK_NAME_ON_TRAFFIC = 15;
    HOOK_NAME_ON_TRAFFIC_FROM_CLIENT = 16;
    HOOK_NAME_ON_TRAFFIC_TO_SERVER = 17;
    HOOK_NAME_ON_TRAFFIC_FROM_SERVER = 18;
    HOOK_NAME_ON_TRAFFIC_TO_CLIENT = 19;
    HOOK_NAME_ON_SHUTDOWN = 20;
    HOOK_NAME_ON_TICK = 21;
    HOOK_NAME_ON_HOOK = 22;
}

message PluginID {
    string name = 1;
    string version = 2;
    string remote_url = 3;
    string checksum = 4;
}

message PluginConfig {
    PluginID id = 1;
    string description = 2;
    repeated string authors = 3;
    string license = 4;
    string project_url = 5;
    // internal and external config options
    map<string, string> config = 6;
    // hooks it attaches to
    repeated HookName hooks = 7;
    // required plugins
    map<string, string> requires = 8;
    repeated string tags = 9;
    repeated string categories = 10;
}
